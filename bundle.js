(function () {
  'use strict';

  // This line uses D3 to set the text of the message div.
  d3.select('#message').text('Data Binding in D3');
  // add some data
  var scores = [
    {
      name: 'Andy',
      score: 25,
    },
    {
      name: 'Beth',
      score: 39,
    },
    {
      name: 'Craig',
      score: 42,
    },
    {
      name: 'Diane',
      score: 35,
    },
    {
      name: 'Evelyn',
      score: 48,
    },
  ];
  // data binding
  d3.selectAll('circle').data(scores); // joins data
  d3.selectAll('circle').attr('r', function (d) {
    return d.score;
  });
  d3.selectAll('circle').style('fill', function (d) {
    if (d.score % 2 == 0) {
      return 'green';
    } else {
      return 'red';
    }
  });
  var new_svg = d3
    .select('body')
    .append('svg')
    .attr('width', '760')
    .attr('height', '140');

  new_svg.selectAll("rect")
    .data(scores)
  	.enter()
  	.append("g")
  	.append("rect")
    .attr('height', 19)
  	.attr('x', '55')
    .attr('width', function(d) {
      var scaleFactor = 10;
      return d.score * scaleFactor;
    })
    .attr('y', function(d, i) {
      return i * 20;
    })
  	.style('fill', 'red')
  	.style('opacity', '0.5');

  // Join scores to text elements and modify content and position
  new_svg.selectAll('g')
  	.append("text")
    .attr('y', function(d, i) {
      return i * 20 + 19;
    })
    .attr('x',1)
    .text(function(d) {
      return d.name;
    });

  new_svg.selectAll("g")
  	.append("text")
  	.attr("y", function(d, i) {
    	return i*20 + 19;
    })
  	.attr("x", function (d) {
  	return d.score * 10 + 30;
  	})
  	.text(function (d) {
  		return d.score;
  	});

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgbGluZSB1c2VzIEQzIHRvIHNldCB0aGUgdGV4dCBvZiB0aGUgbWVzc2FnZSBkaXYuXG5kMy5zZWxlY3QoJyNtZXNzYWdlJykudGV4dCgnRGF0YSBCaW5kaW5nIGluIEQzJyk7XG4vLyBhZGQgc29tZSBkYXRhXG52YXIgc2NvcmVzID0gW1xuICB7XG4gICAgbmFtZTogJ0FuZHknLFxuICAgIHNjb3JlOiAyNSxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdCZXRoJyxcbiAgICBzY29yZTogMzksXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnQ3JhaWcnLFxuICAgIHNjb3JlOiA0MixcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdEaWFuZScsXG4gICAgc2NvcmU6IDM1LFxuICB9LFxuICB7XG4gICAgbmFtZTogJ0V2ZWx5bicsXG4gICAgc2NvcmU6IDQ4LFxuICB9LFxuXTtcbi8vIGRhdGEgYmluZGluZ1xuZDMuc2VsZWN0QWxsKCdjaXJjbGUnKS5kYXRhKHNjb3Jlcyk7IC8vIGpvaW5zIGRhdGFcbmQzLnNlbGVjdEFsbCgnY2lyY2xlJykuYXR0cigncicsIGZ1bmN0aW9uIChkKSB7XG4gIHJldHVybiBkLnNjb3JlO1xufSk7XG5kMy5zZWxlY3RBbGwoJ2NpcmNsZScpLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKGQpIHtcbiAgaWYgKGQuc2NvcmUgJSAyID09IDApIHtcbiAgICByZXR1cm4gJ2dyZWVuJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ3JlZCc7XG4gIH1cbn0pO1xudmFyIG5ld19zdmcgPSBkM1xuICAuc2VsZWN0KCdib2R5JylcbiAgLmFwcGVuZCgnc3ZnJylcbiAgLmF0dHIoJ3dpZHRoJywgJzc2MCcpXG4gIC5hdHRyKCdoZWlnaHQnLCAnMTQwJyk7XG5cbm5ld19zdmcuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAuZGF0YShzY29yZXMpXG5cdC5lbnRlcigpXG5cdC5hcHBlbmQoXCJnXCIpXG5cdC5hcHBlbmQoXCJyZWN0XCIpXG4gIC5hdHRyKCdoZWlnaHQnLCAxOSlcblx0LmF0dHIoJ3gnLCAnNTUnKVxuICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbihkKSB7XG4gICAgdmFyIHNjYWxlRmFjdG9yID0gMTA7XG4gICAgcmV0dXJuIGQuc2NvcmUgKiBzY2FsZUZhY3RvcjtcbiAgfSlcbiAgLmF0dHIoJ3knLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgcmV0dXJuIGkgKiAyMDtcbiAgfSlcblx0LnN0eWxlKCdmaWxsJywgJ3JlZCcpXG5cdC5zdHlsZSgnb3BhY2l0eScsICcwLjUnKTtcblxuLy8gSm9pbiBzY29yZXMgdG8gdGV4dCBlbGVtZW50cyBhbmQgbW9kaWZ5IGNvbnRlbnQgYW5kIHBvc2l0aW9uXG5uZXdfc3ZnLnNlbGVjdEFsbCgnZycpXG5cdC5hcHBlbmQoXCJ0ZXh0XCIpXG4gIC5hdHRyKCd5JywgZnVuY3Rpb24oZCwgaSkge1xuICAgIHJldHVybiBpICogMjAgKyAxOTtcbiAgfSlcbiAgLmF0dHIoJ3gnLDEpXG4gIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5uYW1lO1xuICB9KTtcblxubmV3X3N2Zy5zZWxlY3RBbGwoXCJnXCIpXG5cdC5hcHBlbmQoXCJ0ZXh0XCIpXG5cdC5hdHRyKFwieVwiLCBmdW5jdGlvbihkLCBpKSB7XG4gIFx0cmV0dXJuIGkqMjAgKyAxOTtcbiAgfSlcblx0LmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkKSB7XG5cdHJldHVybiBkLnNjb3JlICogMTAgKyAzMDtcblx0fSlcblx0LnRleHQoZnVuY3Rpb24gKGQpIHtcblx0XHRyZXR1cm4gZC5zY29yZTtcblx0fSk7XG5cblxuXG5cblxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztFQUFBO0VBQ0EsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztFQUNqRDtFQUNBLElBQUksTUFBTSxH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